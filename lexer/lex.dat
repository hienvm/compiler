# Các macro cho các ký tự đặc biệt: blank( ) tab(\t) LF(\n) CR(\r) FF(\f) BS(\b) hash(#)

KEYWORDS
# Dùng để giảm kích thước dfa và để dễ dàng thêm các từ khóa mới
# Chỉ hỗ trợ các keyword thỏa mãn pattern của một token nào đó (chẳng hạn như identifier đối với ngôn ngữ VC), nếu không thì phải cho vào dfa
# Ngoài ra, vẫn cần cho true và false vào dfa
boolean break continue else for float if int return void while


START_STATE
# tên trạng thái có thể đặt bất kỳ, miễn không chứa khoảng trắng
0


TERMINAL_STATES
# Là lớp cha của ACCEPTING_STATES, LAS, Error...
# Khi DFA nhảy tới các trạng thái này thì DFA sẽ reset lại
# Có thể dùng để đoán nhận và lược bỏ các từ tố không cần thiết
# Để tối ưu, chỉ cần dùng 1 terminal_state trong toàn bộ chương trình
-1


ACCEPTING_STATES
# Dùng để đoán nhận và TRẢ VỀ các từ tố hợp lệ
# tên_trạng_thái token_label_1 token_label_2 ...
<= operator relational <=
>= operator relational >=
== operator equality ==
!= operator equality !=
&& operator logical &&
|| operator logical ||
+ operator arithmetic +
- operator arithmetic -
* operator arithmetic *
"" literal_string
{ seperator {
( seperator (
[ seperator [
} seperator }
) seperator )
] seperator ]
; seperator ;
, seperator ,


LOOKAHEAD_ACCEPTING_STATES
# Dùng để nhận biết giới hạn của các từ tố vô hạn hoặc các từ tố mở rộng(phân biệt < và <=)...
# Nếu nhìn trước MỘT ký tự mà đi đến những trạng thái này thì accept toàn bộ xâu trước đó
<LAS operator relational <
>LAS operator relational >
/LAS operator arithmetic /
=LAS operator assignment =
!LAS operator logical !
idLAS identifier
float_eLAS literal_float e_notation
floatLAS literal_float
intLAS literal_int
trueLAS literal_boolean true
falseLAS literal_boolean false


ERROR_STATES
# Các trạng thái lỗi
err_str "Undetermined string literal"


ESCAPES
# các chuỗi escape
# state old_str new_str
"\b \b backspace
"\f \f FF
"\n \n LF
"\r \r CR
"\t \t tab
"\' \' '
"\" \" "
"\\ \\ \
# loại bỏ dấu " ở đầu và cuối string literal
" "
"" "


GROUPS
# Phân nhóm các ký tự để giảm số lượng cạnh của dfa
# tên_nhóm ký_tự_1 ký_tự_2 ...
ws blank tab LF CR FF
letter _ a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
digit 0 1 2 3 4 5 6 7 8 9


TRANSITIONS
# other là phân nhóm đặc biệt, khớp với mọi input và có mức ưu tiên thấp nhất (input -> group -> other)
# trạng_thái_hiện_tại (input/group/other trạng_thái_tiếp_theo) ...

# discards (comment, ws,...)
0 (/ /) (ws -1)
/ (/ //) (* /*)
// (LF -1) (CR -1) (other //)
/* (* /**) (other /*)
/** (/ -1) (other /*)

# operators
0 (< <) (> >) (= =) (! !) (& &) (| |) (+ +) (- -) (* *) (/ /)
< (= <=) (other <LAS)
> (= >=) (other >LAS)
= (= ==) (other =LAS)
! (= !=) (other !LAS)
& (& &&)
| (| ||)
/ (other /LAS)

# seperators
0 ({ {) (( () ([ [) (} }) () )) (] ]) (; ;) (, ,)

# id
0 (letter id)
id (letter id) (digit id) (other idLAS)

# boolean literal
0 (t t) (f f) (letter id) (digit id)
t (r tr) (letter id) (digit id) (other idLAS)
tr (u tru) (letter id) (digit id) (other idLAS)
tru (e true) (letter id) (digit id) (other idLAS)
true (letter id) (digit id) (other trueLAS)
f (a fa) (letter id) (digit id) (other idLAS)
fa (l fal) (letter id) (digit id) (other idLAS)
fal (s fals) (letter id) (digit id) (other idLAS)
fals (e false) (letter id) (digit id) (other idLAS)
false (letter id) (digit id) (other falseLAS)

# number literal
0 (digit int) (. .)
int (digit int) (. .) (E exp) (e exp) (other intLAS)
. (digit fraction) (E exp) (e exp) (other floatLAS)
fraction (digit fraction) (E exp) (e exp) (other floatLAS)
exp (+ exp_signed) (- exp_signed) (digit exp_val)
exp_signed (digit exp_val)
exp_val (digit exp_val) (other float_eLAS)

# string literal (có escape)
0 (" ")
" (LF err_str) (CR err_str) (\ "\) (" "") (other ")
"\ (b "\b) (f "\f) (n "\n) (r "\r) (t "\t) (' "\') (" "\") (\ "\\) (other ")
"\b (LF err_str) (CR err_str) (\ "\) (" "") (other ")
"\f (LF err_str) (CR err_str) (\ "\) (" "") (other ")
"\n (LF err_str) (CR err_str) (\ "\) (" "") (other ")
"\r (LF err_str) (CR err_str) (\ "\) (" "") (other ")
"\t (LF err_str) (CR err_str) (\ "\) (" "") (other ")
"\' (LF err_str) (CR err_str) (\ "\) (" "") (other ")
"\" (LF err_str) (CR err_str) (\ "\) (" "") (other ")
"\\ (LF err_str) (CR err_str) (\ "\) (" "") (other ")