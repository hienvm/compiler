{
    "start": "program",
    "table": {
        "para-list": {
            "`(`": "para-list -> `(` proper-para-list `)`"
        },
        "para-decl": {
            "`float`": "para-decl -> type declarator",
            "`void`": "para-decl -> type declarator",
            "`int`": "para-decl -> type declarator",
            "`boolean`": "para-decl -> type declarator"
        },
        "proper-arg-list-after": {
            "`,`": "proper-arg-list-after -> `,` arg proper-arg-list-after"
        },
        "equality-expr": {
            "`+`": "equality-expr -> rel-expr equality-expr-after",
            "`identifier`": "equality-expr -> rel-expr equality-expr-after",
            "`!`": "equality-expr -> rel-expr equality-expr-after",
            "`literal_string`": "equality-expr -> rel-expr equality-expr-after",
            "`-`": "equality-expr -> rel-expr equality-expr-after",
            "`literal_int`": "equality-expr -> rel-expr equality-expr-after",
            "`(`": "equality-expr -> rel-expr equality-expr-after",
            "`literal_boolean`": "equality-expr -> rel-expr equality-expr-after",
            "`literal_float`": "equality-expr -> rel-expr equality-expr-after"
        },
        "arg": {
            "`+`": "arg -> expr",
            "`identifier`": "arg -> expr",
            "`!`": "arg -> expr",
            "`literal_string`": "arg -> expr",
            "`-`": "arg -> expr",
            "`literal_int`": "arg -> expr",
            "`(`": "arg -> expr",
            "`literal_boolean`": "arg -> expr",
            "`literal_float`": "arg -> expr"
        },
        "type": {
            "`void`": "type -> `void`",
            "`boolean`": "type -> `boolean`",
            "`int`": "type -> `int`",
            "`float`": "type -> `float`"
        },
        "init-declarator-after": {
            "`=`": "init-declarator-after -> `=` initializer",
            "`,`": "init-declarator-after -> epsilon",
            "`;`": "init-declarator-after -> epsilon"
        },
        "expr": {
            "`+`": "expr -> assignment-expr",
            "`identifier`": "expr -> assignment-expr",
            "`!`": "expr -> assignment-expr",
            "`literal_string`": "expr -> assignment-expr",
            "`-`": "expr -> assignment-expr",
            "`literal_int`": "expr -> assignment-expr",
            "`(`": "expr -> assignment-expr",
            "`literal_boolean`": "expr -> assignment-expr",
            "`literal_float`": "expr -> assignment-expr"
        },
        "cond-and-expr": {
            "`+`": "cond-and-expr -> equality-expr cond-and-expr-after",
            "`identifier`": "cond-and-expr -> equality-expr cond-and-expr-after",
            "`!`": "cond-and-expr -> equality-expr cond-and-expr-after",
            "`literal_string`": "cond-and-expr -> equality-expr cond-and-expr-after",
            "`-`": "cond-and-expr -> equality-expr cond-and-expr-after",
            "`literal_int`": "cond-and-expr -> equality-expr cond-and-expr-after",
            "`(`": "cond-and-expr -> equality-expr cond-and-expr-after",
            "`literal_boolean`": "cond-and-expr -> equality-expr cond-and-expr-after",
            "`literal_float`": "cond-and-expr -> equality-expr cond-and-expr-after"
        },
        "size": {
            "`literal_int`": "size -> `literal_int`",
            "`]`": "size -> epsilon"
        },
        "else-clause": {
            "`else`": "else-clause -> `else` stmt",
            "`identifier`": "else-clause -> epsilon",
            "`literal_string`": "else-clause -> epsilon",
            "`}`": "else-clause -> epsilon",
            "`for`": "else-clause -> epsilon",
            "`-`": "else-clause -> epsilon",
            "`(`": "else-clause -> epsilon",
            "`literal_boolean`": "else-clause -> epsilon",
            "`return`": "else-clause -> epsilon",
            "`+`": "else-clause -> epsilon",
            "`continue`": "else-clause -> epsilon",
            "`if`": "else-clause -> epsilon",
            "`while`": "else-clause -> epsilon",
            "`!`": "else-clause -> epsilon",
            "`break`": "else-clause -> epsilon",
            "`;`": "else-clause -> epsilon",
            "`literal_int`": "else-clause -> epsilon",
            "`literal_float`": "else-clause -> epsilon",
            "`{`": "else-clause -> epsilon"
        },
        "primary-expr-after": {
            "`(`": "primary-expr-after -> arg-list",
            "`[`": "primary-expr-after -> `[` expr `]`",
            "`<=`": "primary-expr-after -> epsilon",
            "`||`": "primary-expr-after -> epsilon",
            "`,`": "primary-expr-after -> epsilon",
            "`==`": "primary-expr-after -> epsilon",
            "`)`": "primary-expr-after -> epsilon",
            "`}`": "primary-expr-after -> epsilon",
            "`-`": "primary-expr-after -> epsilon",
            "`/`": "primary-expr-after -> epsilon",
            "`>`": "primary-expr-after -> epsilon",
            "`!=`": "primary-expr-after -> epsilon",
            "`&&`": "primary-expr-after -> epsilon",
            "`>=`": "primary-expr-after -> epsilon",
            "`+`": "primary-expr-after -> epsilon",
            "`=`": "primary-expr-after -> epsilon",
            "`<`": "primary-expr-after -> epsilon",
            "`*`": "primary-expr-after -> epsilon",
            "`;`": "primary-expr-after -> epsilon",
            "`]`": "primary-expr-after -> epsilon"
        },
        "assignment-expr-after": {
            "`=`": "assignment-expr-after -> `=` cond-or-expr assignment-expr-after",
            "`]`": "assignment-expr-after -> epsilon",
            "`,`": "assignment-expr-after -> epsilon",
            "`}`": "assignment-expr-after -> epsilon",
            "`)`": "assignment-expr-after -> epsilon",
            "`;`": "assignment-expr-after -> epsilon"
        },
        "return-stmt": {
            "`return`": "return-stmt -> `return` expr-stmt"
        },
        "multiplicative-expr": {
            "`+`": "multiplicative-expr -> unary-expr multiplicative-expr-after",
            "`identifier`": "multiplicative-expr -> unary-expr multiplicative-expr-after",
            "`!`": "multiplicative-expr -> unary-expr multiplicative-expr-after",
            "`literal_string`": "multiplicative-expr -> unary-expr multiplicative-expr-after",
            "`-`": "multiplicative-expr -> unary-expr multiplicative-expr-after",
            "`literal_int`": "multiplicative-expr -> unary-expr multiplicative-expr-after",
            "`(`": "multiplicative-expr -> unary-expr multiplicative-expr-after",
            "`literal_boolean`": "multiplicative-expr -> unary-expr multiplicative-expr-after",
            "`literal_float`": "multiplicative-expr -> unary-expr multiplicative-expr-after"
        },
        "cond-and-expr-after": {
            "`&&`": "cond-and-expr-after -> `&&` equality-expr cond-and-expr-after",
            "`]`": "cond-and-expr-after -> epsilon",
            "`||`": "cond-and-expr-after -> epsilon",
            "`,`": "cond-and-expr-after -> epsilon",
            "`}`": "cond-and-expr-after -> epsilon",
            "`=`": "cond-and-expr-after -> epsilon",
            "`)`": "cond-and-expr-after -> epsilon",
            "`;`": "cond-and-expr-after -> epsilon"
        },
        "for-stmt": {
            "`for`": "for-stmt -> `for` `(` for-inner `;` for-inner `;` for-inner `)` stmt"
        },
        "init-declarator": {
            "`identifier`": "init-declarator -> declarator init-declarator-after"
        },
        "stmt": {
            "`{`": "stmt -> compound-stmt",
            "`if`": "stmt -> if-stmt",
            "`for`": "stmt -> for-stmt",
            "`while`": "stmt -> while-stmt",
            "`break`": "stmt -> break-stmt",
            "`continue`": "stmt -> continue-stmt",
            "`return`": "stmt -> return-stmt",
            "`+`": "stmt -> expr-stmt",
            "`identifier`": "stmt -> expr-stmt",
            "`!`": "stmt -> expr-stmt",
            "`literal_string`": "stmt -> expr-stmt",
            "`-`": "stmt -> expr-stmt",
            "`;`": "stmt -> expr-stmt",
            "`literal_int`": "stmt -> expr-stmt",
            "`(`": "stmt -> expr-stmt",
            "`literal_boolean`": "stmt -> expr-stmt",
            "`literal_float`": "stmt -> expr-stmt"
        },
        "compound-stmt": {
            "`{`": "compound-stmt -> `{` compound-stmt-inner `}`"
        },
        "declarator": {
            "`identifier`": "declarator -> identifier declarator-after"
        },
        "initializer-after": {
            "`,`": "initializer-after -> `,` expr initializer-after",
            "`}`": "initializer-after -> epsilon"
        },
        "decl": {
            "`float`": "decl -> type identifier decl-after",
            "`void`": "decl -> type identifier decl-after",
            "`int`": "decl -> type identifier decl-after",
            "`boolean`": "decl -> type identifier decl-after"
        },
        "break-stmt": {
            "`break`": "break-stmt -> `break` `;`"
        },
        "multiplicative-expr-after": {
            "`*`": "multiplicative-expr-after -> `*` unary-expr multiplicative-expr-after",
            "`/`": "multiplicative-expr-after -> `/` unary-expr multiplicative-expr-after",
            "`<=`": "multiplicative-expr-after -> epsilon",
            "`||`": "multiplicative-expr-after -> epsilon",
            "`,`": "multiplicative-expr-after -> epsilon",
            "`==`": "multiplicative-expr-after -> epsilon",
            "`)`": "multiplicative-expr-after -> epsilon",
            "`}`": "multiplicative-expr-after -> epsilon",
            "`-`": "multiplicative-expr-after -> epsilon",
            "`>`": "multiplicative-expr-after -> epsilon",
            "`!=`": "multiplicative-expr-after -> epsilon",
            "`&&`": "multiplicative-expr-after -> epsilon",
            "`>=`": "multiplicative-expr-after -> epsilon",
            "`+`": "multiplicative-expr-after -> epsilon",
            "`=`": "multiplicative-expr-after -> epsilon",
            "`<`": "multiplicative-expr-after -> epsilon",
            "`;`": "multiplicative-expr-after -> epsilon",
            "`]`": "multiplicative-expr-after -> epsilon"
        },
        "equality-expr-after": {
            "`==`": "equality-expr-after -> `==` rel-expr equality-expr-after",
            "`!=`": "equality-expr-after -> `!=` rel-expr equality-expr-after",
            "`&&`": "equality-expr-after -> epsilon",
            "`||`": "equality-expr-after -> epsilon",
            "`,`": "equality-expr-after -> epsilon",
            "`=`": "equality-expr-after -> epsilon",
            "`)`": "equality-expr-after -> epsilon",
            "`}`": "equality-expr-after -> epsilon",
            "`;`": "equality-expr-after -> epsilon",
            "`]`": "equality-expr-after -> epsilon"
        },
        "identifier": {
            "`identifier`": "identifier -> `identifier`"
        },
        "arg-list": {
            "`(`": "arg-list -> `(` proper-arg-list `)`"
        },
        "rel-expr-after": {
            "`<`": "rel-expr-after -> `<` additive-expr",
            "`<=`": "rel-expr-after -> `<=` additive-expr",
            "`>`": "rel-expr-after -> `>` additive-expr",
            "`>=`": "rel-expr-after -> `>=` additive-expr",
            "`&&`": "rel-expr-after -> epsilon",
            "`||`": "rel-expr-after -> epsilon",
            "`,`": "rel-expr-after -> epsilon",
            "`=`": "rel-expr-after -> epsilon",
            "`==`": "rel-expr-after -> epsilon",
            "`)`": "rel-expr-after -> epsilon",
            "`}`": "rel-expr-after -> epsilon",
            "`;`": "rel-expr-after -> epsilon",
            "`]`": "rel-expr-after -> epsilon",
            "`!=`": "rel-expr-after -> epsilon"
        },
        "additive-expr": {
            "`+`": "additive-expr -> multiplicative-expr additive-expr-after",
            "`identifier`": "additive-expr -> multiplicative-expr additive-expr-after",
            "`!`": "additive-expr -> multiplicative-expr additive-expr-after",
            "`literal_string`": "additive-expr -> multiplicative-expr additive-expr-after",
            "`-`": "additive-expr -> multiplicative-expr additive-expr-after",
            "`literal_int`": "additive-expr -> multiplicative-expr additive-expr-after",
            "`(`": "additive-expr -> multiplicative-expr additive-expr-after",
            "`literal_boolean`": "additive-expr -> multiplicative-expr additive-expr-after",
            "`literal_float`": "additive-expr -> multiplicative-expr additive-expr-after"
        },
        "if-stmt": {
            "`if`": "if-stmt -> `if` `(` expr `)` stmt else-clause"
        },
        "assignment-expr": {
            "`+`": "assignment-expr -> cond-or-expr assignment-expr-after",
            "`identifier`": "assignment-expr -> cond-or-expr assignment-expr-after",
            "`!`": "assignment-expr -> cond-or-expr assignment-expr-after",
            "`literal_string`": "assignment-expr -> cond-or-expr assignment-expr-after",
            "`-`": "assignment-expr -> cond-or-expr assignment-expr-after",
            "`literal_int`": "assignment-expr -> cond-or-expr assignment-expr-after",
            "`(`": "assignment-expr -> cond-or-expr assignment-expr-after",
            "`literal_boolean`": "assignment-expr -> cond-or-expr assignment-expr-after",
            "`literal_float`": "assignment-expr -> cond-or-expr assignment-expr-after"
        },
        "proper-para-list-after": {
            "`,`": "proper-para-list-after -> `,` para-decl proper-para-list-after",
            "`)`": "proper-para-list-after -> epsilon"
        },
        "var-decl-after": {
            "`float`": "var-decl-after -> init-declarator-list `;`",
            "`void`": "var-decl-after -> init-declarator-list `;`",
            "`,`": "var-decl-after -> init-declarator-list `;`",
            "`=`": "var-decl-after -> init-declarator-list `;`",
            "`EOF`": "var-decl-after -> init-declarator-list `;`",
            "`;`": "var-decl-after -> init-declarator-list `;`",
            "`int`": "var-decl-after -> init-declarator-list `;`",
            "`boolean`": "var-decl-after -> init-declarator-list `;`"
        },
        "init-declarator-list": {
            "`=`": "init-declarator-list -> init-declarator-after init-declarator-list-after",
            "`,`": "init-declarator-list -> init-declarator-after init-declarator-list-after",
            "`;`": "init-declarator-list -> init-declarator-after init-declarator-list-after"
        },
        "expr-stmt": {
            "`+`": "expr-stmt -> expr `;`",
            "`identifier`": "expr-stmt -> expr `;`",
            "`!`": "expr-stmt -> expr `;`",
            "`literal_string`": "expr-stmt -> expr `;`",
            "`-`": "expr-stmt -> expr `;`",
            "`literal_int`": "expr-stmt -> expr `;`",
            "`(`": "expr-stmt -> expr `;`",
            "`literal_boolean`": "expr-stmt -> expr `;`",
            "`literal_float`": "expr-stmt -> expr `;`",
            "`;`": "expr-stmt -> `;`"
        },
        "rel-expr": {
            "`+`": "rel-expr -> additive-expr rel-expr-after",
            "`identifier`": "rel-expr -> additive-expr rel-expr-after",
            "`!`": "rel-expr -> additive-expr rel-expr-after",
            "`literal_string`": "rel-expr -> additive-expr rel-expr-after",
            "`-`": "rel-expr -> additive-expr rel-expr-after",
            "`literal_int`": "rel-expr -> additive-expr rel-expr-after",
            "`(`": "rel-expr -> additive-expr rel-expr-after",
            "`literal_boolean`": "rel-expr -> additive-expr rel-expr-after",
            "`literal_float`": "rel-expr -> additive-expr rel-expr-after"
        },
        "for-inner": {
            "`+`": "for-inner -> expr",
            "`identifier`": "for-inner -> expr",
            "`!`": "for-inner -> expr",
            "`literal_string`": "for-inner -> expr",
            "`-`": "for-inner -> expr",
            "`literal_int`": "for-inner -> expr",
            "`(`": "for-inner -> expr",
            "`literal_boolean`": "for-inner -> expr",
            "`literal_float`": "for-inner -> expr",
            "`;`": "for-inner -> epsilon"
        },
        "additive-expr-after": {
            "`+`": "additive-expr-after -> `+` multiplicative-expr additive-expr-after",
            "`-`": "additive-expr-after -> `-` multiplicative-expr additive-expr-after",
            "`&&`": "additive-expr-after -> epsilon",
            "`<=`": "additive-expr-after -> epsilon",
            "`||`": "additive-expr-after -> epsilon",
            "`>=`": "additive-expr-after -> epsilon",
            "`,`": "additive-expr-after -> epsilon",
            "`=`": "additive-expr-after -> epsilon",
            "`==`": "additive-expr-after -> epsilon",
            "`<`": "additive-expr-after -> epsilon",
            "`)`": "additive-expr-after -> epsilon",
            "`}`": "additive-expr-after -> epsilon",
            "`;`": "additive-expr-after -> epsilon",
            "`]`": "additive-expr-after -> epsilon",
            "`>`": "additive-expr-after -> epsilon",
            "`!=`": "additive-expr-after -> epsilon"
        },
        "unary-expr": {
            "`+`": "unary-expr -> `+` unary-expr",
            "`-`": "unary-expr -> `-` unary-expr",
            "`!`": "unary-expr -> `!` unary-expr",
            "`literal_int`": "unary-expr -> primary-expr",
            "`identifier`": "unary-expr -> primary-expr",
            "`(`": "unary-expr -> primary-expr",
            "`literal_boolean`": "unary-expr -> primary-expr",
            "`literal_float`": "unary-expr -> primary-expr",
            "`literal_string`": "unary-expr -> primary-expr"
        },
        "proper-arg-list": {
            "`)`": "proper-arg-list -> epsilon",
            "`+`": "proper-arg-list -> arg proper-arg-list-after",
            "`identifier`": "proper-arg-list -> arg proper-arg-list-after",
            "`!`": "proper-arg-list -> arg proper-arg-list-after",
            "`literal_string`": "proper-arg-list -> arg proper-arg-list-after",
            "`-`": "proper-arg-list -> arg proper-arg-list-after",
            "`literal_int`": "proper-arg-list -> arg proper-arg-list-after",
            "`(`": "proper-arg-list -> arg proper-arg-list-after",
            "`literal_boolean`": "proper-arg-list -> arg proper-arg-list-after",
            "`literal_float`": "proper-arg-list -> arg proper-arg-list-after"
        },
        "decl-after": {
            "`(`": "decl-after -> func-decl-after",
            "`float`": "decl-after -> var-decl-after",
            "`void`": "decl-after -> var-decl-after",
            "`,`": "decl-after -> var-decl-after",
            "`=`": "decl-after -> var-decl-after",
            "`EOF`": "decl-after -> var-decl-after",
            "`;`": "decl-after -> var-decl-after",
            "`int`": "decl-after -> var-decl-after",
            "`boolean`": "decl-after -> var-decl-after"
        },
        "initializer": {
            "`+`": "initializer -> expr",
            "`identifier`": "initializer -> expr",
            "`!`": "initializer -> expr",
            "`literal_string`": "initializer -> expr",
            "`-`": "initializer -> expr",
            "`literal_int`": "initializer -> expr",
            "`(`": "initializer -> expr",
            "`literal_boolean`": "initializer -> expr",
            "`literal_float`": "initializer -> expr",
            "`{`": "initializer -> `{` expr initializer-after `}`"
        },
        "program": {
            "`float`": "program -> decl program",
            "`void`": "program -> decl program",
            "`int`": "program -> decl program",
            "`boolean`": "program -> decl program",
            "`EOF`": "program -> epsilon"
        },
        "compound-stmt-inner": {
            "`identifier`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`literal_string`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`for`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`-`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`(`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`literal_boolean`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`return`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`+`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`continue`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`if`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`while`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`!`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`break`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`;`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`literal_int`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`literal_float`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`{`": "compound-stmt-inner -> stmt compound-stmt-inner",
            "`}`": "compound-stmt-inner -> epsilon"
        },
        "while-stmt": {
            "`while`": "while-stmt -> `while` `(` expr `)` stmt"
        },
        "cond-or-expr-after": {
            "`||`": "cond-or-expr-after -> `||` cond-and-expr cond-or-expr-after",
            "`]`": "cond-or-expr-after -> epsilon",
            "`,`": "cond-or-expr-after -> epsilon",
            "`}`": "cond-or-expr-after -> epsilon",
            "`=`": "cond-or-expr-after -> epsilon",
            "`)`": "cond-or-expr-after -> epsilon",
            "`;`": "cond-or-expr-after -> epsilon"
        },
        "declarator-after": {
            "`[`": "declarator-after -> `[` size `]`",
            "`,`": "declarator-after -> epsilon",
            "`=`": "declarator-after -> epsilon",
            "`)`": "declarator-after -> epsilon",
            "`;`": "declarator-after -> epsilon"
        },
        "continue-stmt": {
            "`continue`": "continue-stmt -> `continue` `;`"
        },
        "cond-or-expr": {
            "`+`": "cond-or-expr -> cond-and-expr cond-or-expr-after",
            "`identifier`": "cond-or-expr -> cond-and-expr cond-or-expr-after",
            "`!`": "cond-or-expr -> cond-and-expr cond-or-expr-after",
            "`literal_string`": "cond-or-expr -> cond-and-expr cond-or-expr-after",
            "`-`": "cond-or-expr -> cond-and-expr cond-or-expr-after",
            "`literal_int`": "cond-or-expr -> cond-and-expr cond-or-expr-after",
            "`(`": "cond-or-expr -> cond-and-expr cond-or-expr-after",
            "`literal_boolean`": "cond-or-expr -> cond-and-expr cond-or-expr-after",
            "`literal_float`": "cond-or-expr -> cond-and-expr cond-or-expr-after"
        },
        "init-declarator-list-after": {
            "`,`": "init-declarator-list-after -> `,` init-declarator init-declarator-list-after",
            "`;`": "init-declarator-list-after -> epsilon"
        },
        "proper-para-list": {
            "`)`": "proper-para-list -> epsilon",
            "`float`": "proper-para-list -> para-decl proper-para-list-after",
            "`void`": "proper-para-list -> para-decl proper-para-list-after",
            "`int`": "proper-para-list -> para-decl proper-para-list-after",
            "`boolean`": "proper-para-list -> para-decl proper-para-list-after"
        },
        "primary-expr": {
            "`identifier`": "primary-expr -> identifier primary-expr-after",
            "`(`": "primary-expr -> `(` expr `)`",
            "`literal_int`": "primary-expr -> `literal_int`",
            "`literal_float`": "primary-expr -> `literal_float`",
            "`literal_boolean`": "primary-expr -> `literal_boolean`",
            "`literal_string`": "primary-expr -> `literal_string`"
        },
        "func-decl-after": {
            "`(`": "func-decl-after -> para-list compound-stmt"
        }
    }
}