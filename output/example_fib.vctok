At (3, 1)..(3, 4): Token = void keyword ; Lexeme = void
At (3, 6)..(3, 9): Token = identifier ; Lexeme = main
At (3, 10)..(3, 10): Token = ( seperator ; Lexeme = (
At (3, 11)..(3, 11): Token = ) seperator ; Lexeme = )
At (3, 13)..(3, 13): Token = { seperator ; Lexeme = {
At (4, 5)..(4, 7): Token = int keyword ; Lexeme = int
At (4, 9)..(4, 9): Token = identifier ; Lexeme = n
At (4, 10)..(4, 10): Token = seperator ; ; Lexeme = ;
At (5, 5)..(5, 7): Token = int keyword ; Lexeme = int
At (5, 9)..(5, 9): Token = identifier ; Lexeme = i
At (5, 10)..(5, 10): Token = seperator ; ; Lexeme = ;
At (6, 5)..(6, 7): Token = int keyword ; Lexeme = int
At (6, 9)..(6, 15): Token = identifier ; Lexeme = current
At (6, 16)..(6, 16): Token = seperator ; ; Lexeme = ;
At (7, 5)..(7, 7): Token = int keyword ; Lexeme = int
At (7, 9)..(7, 12): Token = identifier ; Lexeme = next
At (7, 13)..(7, 13): Token = seperator ; ; Lexeme = ;
At (8, 5)..(8, 7): Token = int keyword ; Lexeme = int
At (8, 9)..(8, 15): Token = identifier ; Lexeme = twoaway
At (8, 16)..(8, 16): Token = seperator ; ; Lexeme = ;
At (10, 5)..(10, 13): Token = identifier ; Lexeme = putString
At (10, 14)..(10, 14): Token = ( seperator ; Lexeme = (
At (10, 16)..(10, 67): Token = literal_string ; Lexeme = How many Fibonacci numbers do you want to compute? 
At (10, 68)..(10, 68): Token = ) seperator ; Lexeme = )
At (10, 69)..(10, 69): Token = seperator ; ; Lexeme = ;
At (11, 5)..(11, 5): Token = identifier ; Lexeme = n
At (11, 7)..(11, 7): Token = operator assignment = ; Lexeme = =
At (11, 9)..(11, 14): Token = identifier ; Lexeme = getInt
At (11, 15)..(11, 15): Token = ( seperator ; Lexeme = (
At (11, 16)..(11, 16): Token = ) seperator ; Lexeme = )
At (11, 17)..(11, 17): Token = seperator ; ; Lexeme = ;
At (12, 5)..(12, 6): Token = if keyword ; Lexeme = if
At (12, 8)..(12, 8): Token = ( seperator ; Lexeme = (
At (12, 9)..(12, 9): Token = identifier ; Lexeme = n
At (12, 10)..(12, 10): Token = < operator relational ; Lexeme = <
At (14, 0)..(14, 0): Token = EOF ; Lexeme = EOF
