At (1, 1)..(1, 1): Token = identifier ; Lexeme = x
At (1, 2)..(1, 2): Token = = operator assignment ; Lexeme = =
At (1, 3)..(1, 3): Token = number int literal ; Lexeme = 1
At (1, 4)..(1, 4): Token = arithmetic operator / ; Lexeme = /
At (1, 5)..(1, 5): Token = number int literal ; Lexeme = 2
At (1, 6)..(1, 7): Token = identifier ; Lexeme = as
At (1, 8)..(1, 8): Token = arithmetic operator + ; Lexeme = +
At (1, 9)..(1, 12): Token = true boolean literal ; Lexeme = true
At (1, 13)..(1, 14): Token = logical && operator ; Lexeme = &&
At (1, 15)..(1, 15): Token = seperator ( ; Lexeme = (
At (1, 16)..(1, 16): Token = identifier ; Lexeme = x
At (1, 17)..(1, 17): Token = arithmetic operator + ; Lexeme = +
At (1, 18)..(1, 18): Token = number int literal ; Lexeme = 3
At (1, 19)..(1, 19): Token = seperator ) ; Lexeme = )
At (1, 20)..(1, 20): Token = ; seperator ; Lexeme = ;
At (1, 22)..(1, 27): Token = e_notation number float literal ; Lexeme = .35e-2
At (1, 29)..(1, 37): Token = e_notation number float literal ; Lexeme = 12.3213e3
At (1, 39)..(1, 43): Token = identifier ; Lexeme = true4
At (1, 45)..(1, 49): Token = false boolean literal ; Lexeme = false
At (1, 52)..(1, 71): Token = string literal ; Lexeme = adasd 12 32"x+7asd
At (1, 72)..(1, 72): Token = number int literal ; Lexeme = 2
At (2, 1)..(2, 1): Token = identifier ; Lexeme = a
At (2, 24)..(3, 0): Error "Undetermined string literal": adsdaos[]]q[wd  asds]

