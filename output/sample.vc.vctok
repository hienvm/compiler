(1, 1)..(1, 3): Token = identifier ; Lexeme = asd
(1, 5)..(1, 5): Token = int literal ; Lexeme = 1
(1, 6)..(1, 6): Token = identifier ; Lexeme = p
(1, 7)..(1, 7): Unrecognized spelling: {
(1, 8)..(1, 9): Token = identifier ; Lexeme = ol
(1, 11)..(1, 14): Token = identifier ; Lexeme = bool
(1, 16)..(1, 22): Token = keyword ; Lexeme = boolean
(1, 24)..(1, 29): Token = identifier ; Lexeme = whi2le
(1, 31)..(1, 35): Token = identifier ; Lexeme = for_n
(2, 2)..(2, 5): Token = keyword ; Lexeme = void
(2, 7)..(2, 10): Token = identifier ; Lexeme = main
(2, 12)..(2, 13): Token = identifier ; Lexeme = in
(2, 15)..(2, 21): Token = e_notation float literal ; Lexeme = 12.3E+7
(2, 22)..(2, 22): Unrecognized spelling: ;
(3, 2)..(3, 2): Token = int literal ; Lexeme = 2
(3, 3)..(3, 3): Token = operator } ; Lexeme = >
(3, 4)..(3, 5): Token = identifier ; Lexeme = _3
(3, 7)..(3, 8): Token = identifier ; Lexeme = is
(3, 10)..(3, 12): Token = identifier ; Lexeme = _x2
(3, 13)..(3, 13): Token = operator } ; Lexeme = >
(3, 14)..(3, 14): Token = int literal ; Lexeme = 7
(4, 2)..(4, 5): Token = float literal ; Lexeme = .234
(4, 7)..(4, 10): Token = float literal ; Lexeme = 24.2
