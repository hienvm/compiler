At (3, 1)..(3, 4): Token = keyword ; Lexeme = void
At (3, 6)..(3, 9): Token = identifier ; Lexeme = main
At (3, 10)..(3, 10): Token = ( seperator ; Lexeme = (
At (3, 11)..(3, 11): Token = ) seperator ; Lexeme = )
At (3, 13)..(3, 13): Token = { seperator ; Lexeme = {
At (4, 5)..(4, 7): Token = keyword ; Lexeme = int
At (4, 9)..(4, 9): Token = identifier ; Lexeme = n
At (4, 10)..(4, 10): Token = ; seperator ; Lexeme = ;
At (5, 5)..(5, 7): Token = keyword ; Lexeme = int
At (5, 9)..(5, 9): Token = identifier ; Lexeme = i
At (5, 10)..(5, 10): Token = ; seperator ; Lexeme = ;
At (6, 5)..(6, 7): Token = keyword ; Lexeme = int
At (6, 9)..(6, 15): Token = identifier ; Lexeme = current
At (6, 16)..(6, 16): Token = ; seperator ; Lexeme = ;
At (7, 5)..(7, 7): Token = keyword ; Lexeme = int
At (7, 9)..(7, 12): Token = identifier ; Lexeme = next
At (7, 13)..(7, 13): Token = ; seperator ; Lexeme = ;
At (8, 5)..(8, 7): Token = keyword ; Lexeme = int
At (8, 9)..(8, 15): Token = identifier ; Lexeme = twoaway
At (8, 16)..(8, 16): Token = ; seperator ; Lexeme = ;
At (10, 5)..(10, 13): Token = identifier ; Lexeme = putString
At (10, 14)..(10, 14): Token = ( seperator ; Lexeme = (
At (10, 16)..(10, 67): Token = string literal ; Lexeme = How many Fibonacci numbers do you want to compute? 
At (10, 68)..(10, 68): Token = ) seperator ; Lexeme = )
At (10, 69)..(10, 69): Token = ; seperator ; Lexeme = ;
At (11, 5)..(11, 5): Token = identifier ; Lexeme = n
At (11, 7)..(11, 7): Token = = operator assignment ; Lexeme = =
At (11, 9)..(11, 14): Token = identifier ; Lexeme = getInt
At (11, 15)..(11, 15): Token = ( seperator ; Lexeme = (
At (11, 16)..(11, 16): Token = ) seperator ; Lexeme = )
At (11, 17)..(11, 17): Token = ; seperator ; Lexeme = ;
At (12, 5)..(12, 6): Token = keyword ; Lexeme = if
At (12, 8)..(12, 8): Token = ( seperator ; Lexeme = (
At (12, 9)..(12, 9): Token = identifier ; Lexeme = n
At (12, 10)..(12, 11): Token = relational operator <= ; Lexeme = <=
At (12, 12)..(12, 12): Token = number literal int ; Lexeme = 0
At (12, 13)..(12, 13): Token = ) seperator ; Lexeme = )
At (13, 8)..(13, 16): Token = identifier ; Lexeme = putString
At (13, 17)..(13, 17): Token = ( seperator ; Lexeme = (
At (13, 19)..(13, 51): Token = string literal ; Lexeme = The number should be positive.

At (13, 52)..(13, 52): Token = ) seperator ; Lexeme = )
At (13, 53)..(13, 53): Token = ; seperator ; Lexeme = ;
At (14, 5)..(14, 8): Token = keyword ; Lexeme = else
At (14, 10)..(14, 10): Token = { seperator ; Lexeme = {
At (15, 7)..(15, 15): Token = identifier ; Lexeme = putString
At (15, 16)..(15, 16): Token = ( seperator ; Lexeme = (
At (15, 18)..(15, 69): Token = string literal ; Lexeme = 

	I 	 Fibonacci(I) 
	=====================

At (15, 70)..(15, 70): Token = ) seperator ; Lexeme = )
At (15, 71)..(15, 71): Token = ; seperator ; Lexeme = ;
At (16, 7)..(16, 10): Token = identifier ; Lexeme = next
At (16, 12)..(16, 12): Token = = operator assignment ; Lexeme = =
At (16, 14)..(16, 20): Token = identifier ; Lexeme = current
At (16, 22)..(16, 22): Token = = operator assignment ; Lexeme = =
At (16, 24)..(16, 24): Token = number literal int ; Lexeme = 1
At (16, 25)..(16, 25): Token = ; seperator ; Lexeme = ;
At (17, 7)..(17, 9): Token = keyword ; Lexeme = for
At (17, 11)..(17, 11): Token = ( seperator ; Lexeme = (
At (17, 12)..(17, 12): Token = identifier ; Lexeme = i
At (17, 13)..(17, 13): Token = = operator assignment ; Lexeme = =
At (17, 14)..(17, 14): Token = number literal int ; Lexeme = 1
At (17, 15)..(17, 15): Token = ; seperator ; Lexeme = ;
At (17, 17)..(17, 17): Token = identifier ; Lexeme = i
At (17, 18)..(17, 19): Token = relational operator <= ; Lexeme = <=
At (17, 20)..(17, 20): Token = identifier ; Lexeme = n
At (17, 21)..(17, 21): Token = ; seperator ; Lexeme = ;
At (17, 23)..(17, 23): Token = identifier ; Lexeme = i
At (17, 24)..(17, 24): Token = = operator assignment ; Lexeme = =
At (17, 25)..(17, 25): Token = identifier ; Lexeme = i
At (17, 26)..(17, 26): Token = + operator arithmetic ; Lexeme = +
At (17, 27)..(17, 27): Token = number literal int ; Lexeme = 1
At (17, 28)..(17, 28): Token = ) seperator ; Lexeme = )
At (17, 30)..(17, 30): Token = { seperator ; Lexeme = {
At (18, 2)..(18, 10): Token = identifier ; Lexeme = putString
At (18, 11)..(18, 11): Token = ( seperator ; Lexeme = (
At (18, 13)..(18, 15): Token = string literal ; Lexeme = 	
At (18, 16)..(18, 16): Token = ) seperator ; Lexeme = )
At (18, 17)..(18, 17): Token = ; seperator ; Lexeme = ;
At (19, 9)..(19, 14): Token = identifier ; Lexeme = putInt
At (19, 15)..(19, 15): Token = ( seperator ; Lexeme = (
At (19, 16)..(19, 16): Token = identifier ; Lexeme = i
At (19, 17)..(19, 17): Token = ) seperator ; Lexeme = )
At (19, 18)..(19, 18): Token = ; seperator ; Lexeme = ;
At (20, 2)..(20, 10): Token = identifier ; Lexeme = putString
At (20, 11)..(20, 11): Token = ( seperator ; Lexeme = (
At (20, 13)..(20, 15): Token = string literal ; Lexeme = 	
At (20, 16)..(20, 16): Token = ) seperator ; Lexeme = )
At (20, 17)..(20, 17): Token = ; seperator ; Lexeme = ;
At (21, 4)..(21, 11): Token = identifier ; Lexeme = putIntLn
At (21, 12)..(21, 12): Token = ( seperator ; Lexeme = (
At (21, 13)..(21, 19): Token = identifier ; Lexeme = current
At (21, 20)..(21, 20): Token = ) seperator ; Lexeme = )
At (21, 21)..(21, 21): Token = ; seperator ; Lexeme = ;
At (22, 2)..(22, 8): Token = identifier ; Lexeme = twoaway
At (22, 10)..(22, 10): Token = = operator assignment ; Lexeme = =
At (22, 12)..(22, 18): Token = identifier ; Lexeme = current
At (22, 19)..(22, 19): Token = + operator arithmetic ; Lexeme = +
At (22, 20)..(22, 23): Token = identifier ; Lexeme = next
At (22, 24)..(22, 24): Token = ; seperator ; Lexeme = ;
At (23, 2)..(23, 8): Token = identifier ; Lexeme = current
At (23, 10)..(23, 10): Token = = operator assignment ; Lexeme = =
At (23, 12)..(23, 15): Token = identifier ; Lexeme = next
At (23, 16)..(23, 16): Token = ; seperator ; Lexeme = ;
At (24, 2)..(24, 5): Token = identifier ; Lexeme = next
At (24, 10)..(24, 10): Token = = operator assignment ; Lexeme = =
At (24, 12)..(24, 18): Token = identifier ; Lexeme = twoaway
At (24, 19)..(24, 19): Token = ; seperator ; Lexeme = ;
At (25, 7)..(25, 7): Token = } seperator ; Lexeme = }
At (26, 5)..(26, 5): Token = } seperator ; Lexeme = }
At (27, 1)..(27, 1): Token = } seperator ; Lexeme = }
