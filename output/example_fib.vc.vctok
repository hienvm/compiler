(1, 1)..(1, 1): Unrecognized spelling: /
(1, 2)..(1, 2): Unrecognized spelling: *
(1, 4)..(1, 7): Token = identifier ; Lexeme = fibo
(1, 8)..(1, 9): Unrecognized spelling: .c
(1, 11)..(1, 11): Unrecognized spelling: -
(1, 12)..(1, 12): Unrecognized spelling: -
(1, 14)..(1, 15): Token = identifier ; Lexeme = It
(1, 17)..(1, 22): Token = identifier ; Lexeme = prints
(1, 24)..(1, 26): Token = identifier ; Lexeme = out
(1, 28)..(1, 30): Token = identifier ; Lexeme = the
(1, 32)..(1, 36): Token = identifier ; Lexeme = first
(1, 38)..(1, 38): Token = identifier ; Lexeme = N
(1, 40)..(1, 48): Token = identifier ; Lexeme = Fibonacci
(1, 50)..(1, 50): Unrecognized spelling: *
(1, 51)..(1, 51): Unrecognized spelling: /
(3, 2)..(3, 5): Token = keyword ; Lexeme = void
(3, 7)..(3, 10): Token = identifier ; Lexeme = main
(3, 11)..(3, 11): Unrecognized spelling: (
(3, 12)..(3, 12): Unrecognized spelling: )
(3, 14)..(3, 14): Unrecognized spelling: {
(4, 6)..(4, 8): Token = keyword ; Lexeme = int
(4, 10)..(4, 10): Token = identifier ; Lexeme = n
(4, 11)..(4, 11): Unrecognized spelling: ;
(4, 20)..(4, 20): Unrecognized spelling: /
(4, 21)..(4, 21): Unrecognized spelling: *
(4, 23)..(4, 25): Token = identifier ; Lexeme = The
(4, 27)..(4, 32): Token = identifier ; Lexeme = number
(4, 34)..(4, 35): Token = identifier ; Lexeme = of
(4, 37)..(4, 45): Token = identifier ; Lexeme = fibonacci
(4, 47)..(4, 53): Token = identifier ; Lexeme = numbers
(4, 55)..(4, 56): Token = identifier ; Lexeme = we
(4, 58)..(4, 61): Token = identifier ; Lexeme = will
(4, 63)..(4, 67): Token = identifier ; Lexeme = print
(4, 69)..(4, 69): Unrecognized spelling: *
(4, 70)..(4, 70): Unrecognized spelling: /
(5, 6)..(5, 8): Token = keyword ; Lexeme = int
(5, 10)..(5, 10): Token = identifier ; Lexeme = i
(5, 11)..(5, 11): Unrecognized spelling: ;
(5, 20)..(5, 20): Unrecognized spelling: /
(5, 21)..(5, 21): Unrecognized spelling: *
(5, 23)..(5, 25): Token = identifier ; Lexeme = The
(5, 27)..(5, 31): Token = identifier ; Lexeme = index
(5, 33)..(5, 34): Token = identifier ; Lexeme = of
(5, 36)..(5, 44): Token = identifier ; Lexeme = fibonacci
(5, 46)..(5, 51): Token = identifier ; Lexeme = number
(5, 53)..(5, 54): Token = identifier ; Lexeme = to
(5, 56)..(5, 57): Token = identifier ; Lexeme = be
(5, 59)..(5, 65): Token = identifier ; Lexeme = printed
(5, 67)..(5, 70): Token = identifier ; Lexeme = next
(5, 72)..(5, 72): Unrecognized spelling: *
(5, 73)..(5, 73): Unrecognized spelling: /
(6, 6)..(6, 8): Token = keyword ; Lexeme = int
(6, 10)..(6, 16): Token = identifier ; Lexeme = current
(6, 17)..(6, 17): Unrecognized spelling: ;
(6, 20)..(6, 20): Unrecognized spelling: /
(6, 21)..(6, 21): Unrecognized spelling: *
(6, 23)..(6, 25): Token = identifier ; Lexeme = The
(6, 27)..(6, 31): Token = identifier ; Lexeme = value
(6, 33)..(6, 34): Token = identifier ; Lexeme = of
(6, 36)..(6, 38): Token = identifier ; Lexeme = the
(6, 40)..(6, 40): Unrecognized spelling: (
(6, 41)..(6, 41): Token = identifier ; Lexeme = i
(6, 42)..(6, 42): Unrecognized spelling: )
(6, 43)..(6, 44): Token = identifier ; Lexeme = th
(6, 46)..(6, 54): Token = identifier ; Lexeme = fibonacci
(6, 56)..(6, 61): Token = identifier ; Lexeme = number
(6, 63)..(6, 63): Unrecognized spelling: *
(6, 64)..(6, 64): Unrecognized spelling: /
(7, 6)..(7, 8): Token = keyword ; Lexeme = int
(7, 10)..(7, 13): Token = identifier ; Lexeme = next
(7, 14)..(7, 14): Unrecognized spelling: ;
(7, 20)..(7, 20): Unrecognized spelling: /
(7, 21)..(7, 21): Unrecognized spelling: *
(7, 23)..(7, 25): Token = identifier ; Lexeme = The
(7, 27)..(7, 31): Token = identifier ; Lexeme = value
(7, 33)..(7, 34): Token = identifier ; Lexeme = of
(7, 36)..(7, 38): Token = identifier ; Lexeme = the
(7, 40)..(7, 40): Unrecognized spelling: (
(7, 41)..(7, 41): Token = identifier ; Lexeme = i
(7, 42)..(7, 42): Unrecognized spelling: +
(7, 43)..(7, 43): Token = int literal ; Lexeme = 1
(7, 44)..(7, 44): Unrecognized spelling: )
(7, 45)..(7, 46): Token = identifier ; Lexeme = th
(7, 48)..(7, 56): Token = identifier ; Lexeme = fibonacci
(7, 58)..(7, 63): Token = identifier ; Lexeme = number
(7, 65)..(7, 65): Unrecognized spelling: *
(7, 66)..(7, 66): Unrecognized spelling: /
(8, 6)..(8, 8): Token = keyword ; Lexeme = int
(8, 10)..(8, 16): Token = identifier ; Lexeme = twoaway
(8, 17)..(8, 17): Unrecognized spelling: ;
(8, 20)..(8, 20): Unrecognized spelling: /
(8, 21)..(8, 21): Unrecognized spelling: *
(8, 23)..(8, 25): Token = identifier ; Lexeme = The
(8, 27)..(8, 31): Token = identifier ; Lexeme = value
(8, 33)..(8, 34): Token = identifier ; Lexeme = of
(8, 36)..(8, 38): Token = identifier ; Lexeme = the
(8, 40)..(8, 40): Unrecognized spelling: (
(8, 41)..(8, 41): Token = identifier ; Lexeme = i
(8, 42)..(8, 42): Unrecognized spelling: +
(8, 43)..(8, 43): Token = int literal ; Lexeme = 2
(8, 44)..(8, 44): Unrecognized spelling: )
(8, 45)..(8, 46): Token = identifier ; Lexeme = th
(8, 48)..(8, 56): Token = identifier ; Lexeme = fibonacci
(8, 58)..(8, 63): Token = identifier ; Lexeme = number
(8, 65)..(8, 65): Unrecognized spelling: *
(8, 66)..(8, 66): Unrecognized spelling: /
(10, 6)..(10, 14): Token = identifier ; Lexeme = putString
(10, 15)..(10, 15): Unrecognized spelling: (
(10, 16)..(10, 16): Unrecognized spelling: "
(10, 17)..(10, 19): Token = identifier ; Lexeme = How
(10, 21)..(10, 24): Token = identifier ; Lexeme = many
(10, 26)..(10, 34): Token = identifier ; Lexeme = Fibonacci
(10, 36)..(10, 42): Token = identifier ; Lexeme = numbers
(10, 44)..(10, 45): Token = identifier ; Lexeme = do
(10, 47)..(10, 49): Token = identifier ; Lexeme = you
(10, 51)..(10, 54): Token = identifier ; Lexeme = want
(10, 56)..(10, 57): Token = identifier ; Lexeme = to
(10, 59)..(10, 65): Token = identifier ; Lexeme = compute
(10, 66)..(10, 66): Unrecognized spelling: ?
(10, 68)..(10, 68): Unrecognized spelling: "
(10, 69)..(10, 69): Unrecognized spelling: )
(10, 70)..(10, 70): Unrecognized spelling: ;
(11, 6)..(11, 6): Token = identifier ; Lexeme = n
(11, 8)..(11, 8): Token = operator = ; Lexeme = =
(11, 10)..(11, 15): Token = identifier ; Lexeme = getInt
(11, 16)..(11, 16): Unrecognized spelling: (
(11, 17)..(11, 17): Unrecognized spelling: )
(11, 18)..(11, 18): Unrecognized spelling: ;
(12, 6)..(12, 7): Token = keyword ; Lexeme = if
(12, 9)..(12, 9): Unrecognized spelling: (
(12, 10)..(12, 10): Token = identifier ; Lexeme = n
(12, 11)..(12, 12): Token = operator <= ; Lexeme = <=
(12, 13)..(12, 13): Token = int literal ; Lexeme = 0
(12, 14)..(12, 14): Unrecognized spelling: )
(13, 9)..(13, 17): Token = identifier ; Lexeme = putString
(13, 18)..(13, 18): Unrecognized spelling: (
(13, 19)..(13, 19): Unrecognized spelling: "
(13, 20)..(13, 22): Token = identifier ; Lexeme = The
(13, 24)..(13, 29): Token = identifier ; Lexeme = number
(13, 31)..(13, 36): Token = identifier ; Lexeme = should
(13, 38)..(13, 39): Token = identifier ; Lexeme = be
(13, 41)..(13, 48): Token = identifier ; Lexeme = positive
(13, 49)..(13, 50): Unrecognized spelling: .\
(13, 51)..(13, 51): Token = identifier ; Lexeme = n
(13, 52)..(13, 52): Unrecognized spelling: "
(13, 53)..(13, 53): Unrecognized spelling: )
(13, 54)..(13, 54): Unrecognized spelling: ;
(14, 6)..(14, 9): Token = keyword ; Lexeme = else
(14, 11)..(14, 11): Unrecognized spelling: {
(15, 8)..(15, 16): Token = identifier ; Lexeme = putString
(15, 17)..(15, 17): Unrecognized spelling: (
(15, 18)..(15, 18): Unrecognized spelling: "
(15, 19)..(15, 19): Unrecognized spelling: \
(15, 20)..(15, 20): Token = identifier ; Lexeme = n
(15, 21)..(15, 21): Unrecognized spelling: \
(15, 22)..(15, 22): Token = identifier ; Lexeme = n
(15, 23)..(15, 23): Unrecognized spelling: \
(15, 24)..(15, 25): Token = identifier ; Lexeme = tI
(15, 27)..(15, 27): Unrecognized spelling: \
(15, 28)..(15, 28): Token = identifier ; Lexeme = t
(15, 30)..(15, 38): Token = identifier ; Lexeme = Fibonacci
(15, 39)..(15, 39): Unrecognized spelling: (
(15, 40)..(15, 40): Token = identifier ; Lexeme = I
(15, 41)..(15, 41): Unrecognized spelling: )
(15, 43)..(15, 43): Unrecognized spelling: \
(15, 44)..(15, 44): Token = identifier ; Lexeme = n
(15, 45)..(15, 45): Unrecognized spelling: \
(15, 46)..(15, 46): Token = identifier ; Lexeme = t
(15, 47)..(15, 47): Token = operator = ; Lexeme = =
(15, 48)..(15, 48): Token = operator = ; Lexeme = =
(15, 49)..(15, 49): Token = operator = ; Lexeme = =
(15, 50)..(15, 50): Token = operator = ; Lexeme = =
(15, 51)..(15, 51): Token = operator = ; Lexeme = =
(15, 52)..(15, 52): Token = operator = ; Lexeme = =
(15, 53)..(15, 53): Token = operator = ; Lexeme = =
(15, 54)..(15, 54): Token = operator = ; Lexeme = =
(15, 55)..(15, 55): Token = operator = ; Lexeme = =
(15, 56)..(15, 56): Token = operator = ; Lexeme = =
(15, 57)..(15, 57): Token = operator = ; Lexeme = =
(15, 58)..(15, 58): Token = operator = ; Lexeme = =
(15, 59)..(15, 59): Token = operator = ; Lexeme = =
(15, 60)..(15, 60): Token = operator = ; Lexeme = =
(15, 61)..(15, 61): Token = operator = ; Lexeme = =
(15, 62)..(15, 62): Token = operator = ; Lexeme = =
(15, 63)..(15, 63): Token = operator = ; Lexeme = =
(15, 64)..(15, 64): Token = operator = ; Lexeme = =
(15, 65)..(15, 65): Token = operator = ; Lexeme = =
(15, 66)..(15, 66): Token = operator = ; Lexeme = =
(15, 67)..(15, 67): Token = operator = ; Lexeme = =
(15, 68)..(15, 68): Unrecognized spelling: \
(15, 69)..(15, 69): Token = identifier ; Lexeme = n
(15, 70)..(15, 70): Unrecognized spelling: "
(15, 71)..(15, 71): Unrecognized spelling: )
(15, 72)..(15, 72): Unrecognized spelling: ;
(16, 8)..(16, 11): Token = identifier ; Lexeme = next
(16, 13)..(16, 13): Token = operator = ; Lexeme = =
(16, 15)..(16, 21): Token = identifier ; Lexeme = current
(16, 23)..(16, 23): Token = operator = ; Lexeme = =
(16, 25)..(16, 25): Token = int literal ; Lexeme = 1
(16, 26)..(16, 26): Unrecognized spelling: ;
(17, 8)..(17, 10): Token = keyword ; Lexeme = for
(17, 12)..(17, 12): Unrecognized spelling: (
(17, 13)..(17, 13): Token = identifier ; Lexeme = i
(17, 14)..(17, 14): Token = operator = ; Lexeme = =
(17, 15)..(17, 15): Token = int literal ; Lexeme = 1
(17, 16)..(17, 16): Unrecognized spelling: ;
(17, 18)..(17, 18): Token = identifier ; Lexeme = i
(17, 19)..(17, 20): Token = operator <= ; Lexeme = <=
(17, 21)..(17, 21): Token = identifier ; Lexeme = n
(17, 22)..(17, 22): Unrecognized spelling: ;
(17, 24)..(17, 24): Token = identifier ; Lexeme = i
(17, 25)..(17, 25): Token = operator = ; Lexeme = =
(17, 26)..(17, 26): Token = identifier ; Lexeme = i
(17, 27)..(17, 27): Unrecognized spelling: +
(17, 28)..(17, 28): Token = int literal ; Lexeme = 1
(17, 29)..(17, 29): Unrecognized spelling: )
(17, 31)..(17, 31): Unrecognized spelling: {
(18, 3)..(18, 11): Token = identifier ; Lexeme = putString
(18, 12)..(18, 12): Unrecognized spelling: (
(18, 13)..(18, 13): Unrecognized spelling: "
(18, 14)..(18, 14): Unrecognized spelling: \
(18, 15)..(18, 15): Token = identifier ; Lexeme = t
(18, 16)..(18, 16): Unrecognized spelling: "
(18, 17)..(18, 17): Unrecognized spelling: )
(18, 18)..(18, 18): Unrecognized spelling: ;
(19, 10)..(19, 15): Token = identifier ; Lexeme = putInt
(19, 16)..(19, 16): Unrecognized spelling: (
(19, 17)..(19, 17): Token = identifier ; Lexeme = i
(19, 18)..(19, 18): Unrecognized spelling: )
(19, 19)..(19, 19): Unrecognized spelling: ;
(20, 3)..(20, 11): Token = identifier ; Lexeme = putString
(20, 12)..(20, 12): Unrecognized spelling: (
(20, 13)..(20, 13): Unrecognized spelling: "
(20, 14)..(20, 14): Unrecognized spelling: \
(20, 15)..(20, 15): Token = identifier ; Lexeme = t
(20, 16)..(20, 16): Unrecognized spelling: "
(20, 17)..(20, 17): Unrecognized spelling: )
(20, 18)..(20, 18): Unrecognized spelling: ;
(21, 5)..(21, 12): Token = identifier ; Lexeme = putIntLn
(21, 13)..(21, 13): Unrecognized spelling: (
(21, 14)..(21, 20): Token = identifier ; Lexeme = current
(21, 21)..(21, 21): Unrecognized spelling: )
(21, 22)..(21, 22): Unrecognized spelling: ;
(22, 3)..(22, 9): Token = identifier ; Lexeme = twoaway
(22, 11)..(22, 11): Token = operator = ; Lexeme = =
(22, 13)..(22, 19): Token = identifier ; Lexeme = current
(22, 20)..(22, 20): Unrecognized spelling: +
(22, 21)..(22, 24): Token = identifier ; Lexeme = next
(22, 25)..(22, 25): Unrecognized spelling: ;
(23, 3)..(23, 9): Token = identifier ; Lexeme = current
(23, 11)..(23, 11): Token = operator = ; Lexeme = =
(23, 13)..(23, 16): Token = identifier ; Lexeme = next
(23, 17)..(23, 17): Unrecognized spelling: ;
(24, 3)..(24, 6): Token = identifier ; Lexeme = next
(24, 11)..(24, 11): Token = operator = ; Lexeme = =
(24, 13)..(24, 19): Token = identifier ; Lexeme = twoaway
(24, 20)..(24, 20): Unrecognized spelling: ;
(25, 8)..(25, 8): Unrecognized spelling: }
(26, 6)..(26, 6): Unrecognized spelling: }
(27, 2)..(27, 2): Unrecognized spelling: }
(29, 2)..(29, 2): Unrecognized spelling: /
(29, 3)..(29, 3): Unrecognized spelling: *
(29, 5)..(29, 7): Token = identifier ; Lexeme = The
(29, 9)..(29, 14): Token = identifier ; Lexeme = output
(29, 16)..(29, 19): Token = identifier ; Lexeme = from
(29, 21)..(29, 21): Token = identifier ; Lexeme = a
(29, 23)..(29, 25): Token = identifier ; Lexeme = run
(29, 27)..(29, 28): Token = identifier ; Lexeme = of
(29, 30)..(29, 33): Token = identifier ; Lexeme = this
(29, 35)..(29, 41): Token = identifier ; Lexeme = program
(29, 43)..(29, 45): Token = identifier ; Lexeme = was
(29, 46)..(29, 46): Unrecognized spelling: :
(31, 2)..(31, 4): Token = identifier ; Lexeme = How
(31, 6)..(31, 9): Token = identifier ; Lexeme = many
(31, 11)..(31, 19): Token = identifier ; Lexeme = Fibonacci
(31, 21)..(31, 27): Token = identifier ; Lexeme = numbers
(31, 29)..(31, 30): Token = identifier ; Lexeme = do
(31, 32)..(31, 34): Token = identifier ; Lexeme = you
(31, 36)..(31, 39): Token = identifier ; Lexeme = want
(31, 41)..(31, 42): Token = identifier ; Lexeme = to
(31, 44)..(31, 50): Token = identifier ; Lexeme = compute
(31, 51)..(31, 51): Unrecognized spelling: ?
(31, 53)..(31, 53): Token = int literal ; Lexeme = 9
(33, 3)..(33, 3): Token = identifier ; Lexeme = I
(33, 7)..(33, 15): Token = identifier ; Lexeme = Fibonacci
(33, 16)..(33, 16): Unrecognized spelling: (
(33, 17)..(33, 17): Token = identifier ; Lexeme = I
(33, 18)..(33, 18): Unrecognized spelling: )
(34, 3)..(34, 3): Token = operator = ; Lexeme = =
(34, 4)..(34, 4): Token = operator = ; Lexeme = =
(34, 5)..(34, 5): Token = operator = ; Lexeme = =
(34, 6)..(34, 6): Token = operator = ; Lexeme = =
(34, 7)..(34, 7): Token = operator = ; Lexeme = =
(34, 8)..(34, 8): Token = operator = ; Lexeme = =
(34, 9)..(34, 9): Token = operator = ; Lexeme = =
(34, 10)..(34, 10): Token = operator = ; Lexeme = =
(34, 11)..(34, 11): Token = operator = ; Lexeme = =
(34, 12)..(34, 12): Token = operator = ; Lexeme = =
(34, 13)..(34, 13): Token = operator = ; Lexeme = =
(34, 14)..(34, 14): Token = operator = ; Lexeme = =
(34, 15)..(34, 15): Token = operator = ; Lexeme = =
(34, 16)..(34, 16): Token = operator = ; Lexeme = =
(34, 17)..(34, 17): Token = operator = ; Lexeme = =
(34, 18)..(34, 18): Token = operator = ; Lexeme = =
(34, 19)..(34, 19): Token = operator = ; Lexeme = =
(34, 20)..(34, 20): Token = operator = ; Lexeme = =
(34, 21)..(34, 21): Token = operator = ; Lexeme = =
(34, 22)..(34, 22): Token = operator = ; Lexeme = =
(34, 23)..(34, 23): Token = operator = ; Lexeme = =
(35, 3)..(35, 3): Token = int literal ; Lexeme = 1
(35, 9)..(35, 9): Token = int literal ; Lexeme = 1
(36, 3)..(36, 3): Token = int literal ; Lexeme = 2
(36, 9)..(36, 9): Token = int literal ; Lexeme = 1
(37, 3)..(37, 3): Token = int literal ; Lexeme = 3
(37, 9)..(37, 9): Token = int literal ; Lexeme = 2
(38, 3)..(38, 3): Token = int literal ; Lexeme = 4
(38, 9)..(38, 9): Token = int literal ; Lexeme = 3
(39, 3)..(39, 3): Token = int literal ; Lexeme = 5
(39, 9)..(39, 9): Token = int literal ; Lexeme = 5
(40, 3)..(40, 3): Token = int literal ; Lexeme = 6
(40, 9)..(40, 9): Token = int literal ; Lexeme = 8
(41, 3)..(41, 3): Token = int literal ; Lexeme = 7
(41, 9)..(41, 10): Token = int literal ; Lexeme = 13
(42, 3)..(42, 3): Token = int literal ; Lexeme = 8
(42, 9)..(42, 10): Token = int literal ; Lexeme = 21
(43, 3)..(43, 3): Token = int literal ; Lexeme = 9
(43, 9)..(43, 10): Token = int literal ; Lexeme = 34
(45, 2)..(45, 2): Unrecognized spelling: *
(45, 3)..(45, 3): Unrecognized spelling: /
