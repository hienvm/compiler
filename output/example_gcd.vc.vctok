At (1, 1)..(1, 3): Token = keyword ; Lexeme = int
At (1, 5)..(1, 5): Token = identifier ; Lexeme = i
At (1, 6)..(1, 6): Token = seperator ; ; Lexeme = ;
At (2, 1)..(2, 3): Token = keyword ; Lexeme = int
At (2, 5)..(2, 5): Token = identifier ; Lexeme = j
At (2, 6)..(2, 6): Token = seperator ; ; Lexeme = ;
At (4, 1)..(4, 3): Token = keyword ; Lexeme = int
At (4, 5)..(4, 7): Token = identifier ; Lexeme = gcd
At (4, 8)..(4, 8): Token = seperator ( ; Lexeme = (
At (4, 9)..(4, 11): Token = keyword ; Lexeme = int
At (4, 13)..(4, 13): Token = identifier ; Lexeme = a
At (4, 14)..(4, 14): Token = seperator , ; Lexeme = ,
At (4, 16)..(4, 18): Token = keyword ; Lexeme = int
At (4, 20)..(4, 20): Token = identifier ; Lexeme = b
At (4, 21)..(4, 21): Token = seperator ) ; Lexeme = )
At (4, 23)..(4, 23): Token = seperator { ; Lexeme = {
At (5, 3)..(5, 4): Token = keyword ; Lexeme = if
At (5, 6)..(5, 6): Token = seperator ( ; Lexeme = (
At (5, 7)..(5, 7): Token = identifier ; Lexeme = b
At (5, 9)..(5, 10): Token = equality == operator ; Lexeme = ==
At (5, 12)..(5, 12): Token = int number literal ; Lexeme = 0
At (5, 13)..(5, 13): Token = seperator ) ; Lexeme = )
At (6, 5)..(6, 10): Token = keyword ; Lexeme = return
At (6, 12)..(6, 12): Token = identifier ; Lexeme = a
At (6, 13)..(6, 13): Token = seperator ; ; Lexeme = ;
At (7, 3)..(7, 6): Token = keyword ; Lexeme = else
At (8, 3)..(8, 8): Token = keyword ; Lexeme = return
At (8, 10)..(8, 12): Token = identifier ; Lexeme = gcd
At (8, 13)..(8, 13): Token = seperator ( ; Lexeme = (
At (8, 14)..(8, 14): Token = identifier ; Lexeme = b
At (8, 15)..(8, 15): Token = seperator , ; Lexeme = ,
At (8, 17)..(8, 17): Token = identifier ; Lexeme = a
At (8, 19)..(8, 19): Token = arithmetic - operator ; Lexeme = -
At (8, 21)..(8, 21): Token = seperator ( ; Lexeme = (
At (8, 22)..(8, 22): Token = identifier ; Lexeme = a
At (8, 23)..(8, 23): Token = arithmetic / operator ; Lexeme = /
At (8, 24)..(8, 24): Token = identifier ; Lexeme = b
At (8, 25)..(8, 25): Token = seperator ) ; Lexeme = )
At (8, 27)..(8, 27): Token = arithmetic * operator ; Lexeme = *
At (8, 28)..(8, 28): Token = identifier ; Lexeme = b
At (8, 29)..(8, 29): Token = seperator ) ; Lexeme = )
At (8, 30)..(8, 30): Token = seperator ; ; Lexeme = ;
At (9, 1)..(9, 1): Token = seperator } ; Lexeme = }
At (10, 1)..(10, 4): Token = keyword ; Lexeme = void
At (10, 6)..(10, 9): Token = identifier ; Lexeme = main
At (10, 10)..(10, 10): Token = seperator ( ; Lexeme = (
At (10, 11)..(10, 11): Token = seperator ) ; Lexeme = )
At (10, 13)..(10, 13): Token = seperator { ; Lexeme = {
At (11, 3)..(11, 3): Token = identifier ; Lexeme = i
At (11, 5)..(11, 5): Token = assignment = operator ; Lexeme = =
At (11, 7)..(11, 12): Token = identifier ; Lexeme = getInt
At (11, 13)..(11, 13): Token = seperator ( ; Lexeme = (
At (11, 14)..(11, 14): Token = seperator ) ; Lexeme = )
At (11, 15)..(11, 15): Token = seperator ; ; Lexeme = ;
At (12, 3)..(12, 3): Token = identifier ; Lexeme = j
At (12, 5)..(12, 5): Token = assignment = operator ; Lexeme = =
At (12, 7)..(12, 12): Token = identifier ; Lexeme = getInt
At (12, 13)..(12, 13): Token = seperator ( ; Lexeme = (
At (12, 14)..(12, 14): Token = seperator ) ; Lexeme = )
At (12, 15)..(12, 15): Token = seperator ; ; Lexeme = ;
At (13, 3)..(13, 10): Token = identifier ; Lexeme = putIntLn
At (13, 11)..(13, 11): Token = seperator ( ; Lexeme = (
At (13, 12)..(13, 14): Token = identifier ; Lexeme = gcd
At (13, 15)..(13, 15): Token = seperator ( ; Lexeme = (
At (13, 16)..(13, 16): Token = identifier ; Lexeme = i
At (13, 17)..(13, 17): Token = seperator , ; Lexeme = ,
At (13, 19)..(13, 19): Token = identifier ; Lexeme = j
At (13, 20)..(13, 20): Token = seperator ) ; Lexeme = )
At (13, 21)..(13, 21): Token = seperator ) ; Lexeme = )
At (13, 22)..(13, 22): Token = seperator ; ; Lexeme = ;
At (14, 1)..(14, 1): Token = seperator } ; Lexeme = }
